diff --git a/src/mongo/client/connpool.h b/src/mongo/client/connpool.h
index 1b9fe2761a..465c53e165 100644
--- a/src/mongo/client/connpool.h
+++ b/src/mongo/client/connpool.h
@@ -301,7 +301,7 @@ namespace mongo {
             return _conn;
         }
 
-        bool ok() const { return _conn > 0; }
+        bool ok() const { return _conn > (void*) 0; }
 
         string getHost() const { return _host; }
 
diff --git a/src/mongo/db/client.h b/src/mongo/db/client.h
index 67063ddb14..b997553955 100644
--- a/src/mongo/db/client.h
+++ b/src/mongo/db/client.h
@@ -243,6 +243,6 @@ namespace mongo {
     inline Client::GodScope::~GodScope() { cc()._god = _prev; }
 
 
-    inline bool haveClient() { return currentClient.get() > 0; }
+    inline bool haveClient() { return currentClient.get() > (void*) 0; }
 
 };
diff --git a/src/mongo/db/fts/fts_matcher.cpp b/src/mongo/db/fts/fts_matcher.cpp
index ee462bbb00..67d3ce13d3 100644
--- a/src/mongo/db/fts/fts_matcher.cpp
+++ b/src/mongo/db/fts/fts_matcher.cpp
@@ -230,7 +230,7 @@ namespace mongo {
          * @param haystack, raw string to be parsed
          */
         bool FTSMatcher::_phraseMatches( const string& phrase, const string& haystack ) const {
-            return strcasestr( haystack.c_str(), phrase.c_str() ) > 0;
+            return strcasestr( haystack.c_str(), phrase.c_str() ) > (void*) 0;
         }
 
 
diff --git a/src/mongo/db/namespace.h b/src/mongo/db/namespace.h
index 9d011f684e..4aa1766e81 100644
--- a/src/mongo/db/namespace.h
+++ b/src/mongo/db/namespace.h
@@ -31,7 +31,7 @@ namespace mongo {
         Namespace(const StringData& ns) { *this = ns; }
         Namespace& operator=(const StringData& ns);
 
-        bool hasDollarSign() const { return strchr( buf , '$' ) > 0;  }
+        bool hasDollarSign() const { return strchr( buf , '$' ) > (void*) 0;  }
         void kill() { buf[0] = 0x7f; }
         bool operator==(const char *r) const { return strcmp(buf, r) == 0; }
         bool operator==(const Namespace& r) const { return strcmp(buf, r.buf) == 0; }
diff --git a/src/mongo/db/ops/update_internal.cpp b/src/mongo/db/ops/update_internal.cpp
index 8046adfd49..67bfd814a6 100644
--- a/src/mongo/db/ops/update_internal.cpp
+++ b/src/mongo/db/ops/update_internal.cpp
@@ -1425,7 +1425,7 @@ namespace mongo {
                     continue;
                 }
 
-                _hasDynamicArray = _hasDynamicArray || strstr( fieldName , ".$" ) > 0;
+                _hasDynamicArray = _hasDynamicArray || strstr( fieldName , ".$" ) > (void*) 0;
 
                 Mod m;
                 m.init( op , f , forReplication );
diff --git a/src/mongo/s/d_state.cpp b/src/mongo/s/d_state.cpp
index bca04ff565..ac2d0a2567 100644
--- a/src/mongo/s/d_state.cpp
+++ b/src/mongo/s/d_state.cpp
@@ -418,7 +418,7 @@ namespace mongo {
         if ( ! shardingState.hasVersion( ns ) )
             return false;
 
-        return ShardedConnectionInfo::get(false) > 0;
+        return ShardedConnectionInfo::get(false) > (void*) 0;
     }
 
     class UnsetShardingCommand : public MongodShardCommand {
diff --git a/src/mongo/s/shard.h b/src/mongo/s/shard.h
index 41f819d3ae..1a19d15a65 100644
--- a/src/mongo/s/shard.h
+++ b/src/mongo/s/shard.h
@@ -283,7 +283,7 @@ namespace mongo {
             _finishedInit = true;
         }
         
-        bool ok() const { return _conn > 0; }
+        bool ok() const { return _conn > (void*) 0; }
 
         /**
            this just passes through excpet it checks for stale configs
